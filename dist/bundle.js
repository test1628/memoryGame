!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/Card.js\n\ufeff/* harmony default export */ var Card = (class {\n  constructor() {\t\n\tthis.figureFr = (() => {\n\t\tconst  figureFr = document.createElement('figure');\n\t\tfigureFr.classList.add('front');\n\t\treturn figureFr;\n\t})();\n\t\n\tthis.figureBk = (() => {\n\t\tconst  figureBk = document.createElement('figure');\n\t\tfigureBk.classList.add('back');\n\t\treturn figureBk;\n\t})();\n    \n\tthis.div = (() => {\n\t\tconst  div = document.createElement('div');\n\t\tdiv.classList.add('card');\n\t\tdiv.appendChild(this.figureFr);\n\t\tdiv.appendChild(this.figureBk);\n\t\treturn div;\n\t})();\n  }\n  setPic(pic) {\n\tthis.figureBk.innerHTML = pic;  \n  }\n});\n// CONCATENATED MODULE: ./js/Game.js\n\ufeff\n\nconst wrapper = document.querySelector('.wrapper');\nconst timerEl = document.querySelector('.timerEl');\nconst info_wrapper = document.querySelector('.info_wrapper');\n\n/* harmony default export */ var Game = (class {\n  constructor(pics, handler) {\n\tthis.pics = pics.concat(pics);\n\tthis.cards = [];\n\tthis.restTime = 25;\n\tthis.handler = handler;\n\tfor (let i=0; i<this.pics.length; i++) {\n\t\tthis.cards.push(new Card());\n\t}\n\tthis.cards.forEach(card => wrapper.appendChild(card.div));\n  }\n  \n  shufflePics() {\n\tthis.pics.sort(() => Math.random() - 0.5);  \n  }\n   \n  startGame() {\n\tthis.shufflePics();\n\tfor (let i=0; i<this.pics.length; i++) {\n\t\tthis.cards[i].setPic(this.pics[i]);\n\t}\n\ttimerEl.innerHTML = 'Времени осталось: ' + this.restTime;\n\twrapper.addEventListener('click', this.handler);\n  }\n  \n  restart() {\n\tinfo_wrapper.classList.remove('active');\n\tthis.restTime = 25;\n\tthis.cards.forEach(card => {\n\t\tcard.div.className = '';\n\t\tcard.div.classList.add('card');\n\t});\n\tsetTimeout(this.startGame.bind(this), 500);\n  }\n\n});\n\n// CONCATENATED MODULE: ./js/main.js\n\ufeff\n\n \nconst main_info_wrapper = document.querySelector('.info_wrapper');\nconst msg = main_info_wrapper.querySelector('.msg');\nconst restart = main_info_wrapper.querySelector('.restart');\nconst main_wrapper = document.querySelector('.wrapper');\nconst main_timerEl = document.querySelector('.timerEl');\nlet timer;\nlet needNewTimer = true;\nconst arr = ['🐶', '🐭', '🐹', '🐰', '🐻', '🐼'];\n\nlet previous;\nlet needCheck = false;\nlet count = arr.length;\n\nconst main_handler = ({ target }) => {\n\tconst card = target.parentNode;\n\tif (!card.classList.contains('card') || target.classList.contains('back')) {\n\t\treturn;\n\t}\n\t\n\tif (needNewTimer) {\n\t\tmain_timerEl.innerHTML = 'Времени осталось: ' + mygame.restTime;\n\t\ttimer = setInterval(timeStep, 1000);\n\t\tneedNewTimer = false;\n\t}\n\t\n\tconst wrongCards = main_wrapper.querySelectorAll('.wrong');\n\tif (wrongCards.length > 0) {\n\t\twrongCards.forEach(card => card.classList.remove('flipped'));\n\t\tsetTimeout(()=> {wrongCards.forEach(card => card.classList.remove('wrong'))}, 500);\n\t}\n\tcard.classList.toggle(\"flipped\");\n\t\n\tif (needCheck) {\n\n\t\tif (card.querySelector('.back').innerHTML === previous.querySelector('.back').innerHTML) {\n\t\t\tcard.classList.add('disabled');\n\t\t\tprevious.classList.add('disabled');\n\t\t\tcount -= 1;\n\t\t\tif (count === 0) {\n\t\t\t\tsetResult('Вы выиграли!');\n\t\t\t}\n\t\t} else {\n\t\t\tcard.classList.add('wrong');\n\t\t\tprevious.classList.add('wrong');\n\t\t}\n\t\tneedCheck = false;\n\t\treturn;\n\t}\n\t\n\tneedCheck = true;\n\tprevious = card;\n};\n\nconst mygame = new Game(arr, main_handler);\nmygame.startGame();\n\nconst timeStep = () => {\n\tmygame.restTime -= 1;\n\tmain_timerEl.innerHTML = `Времени осталось: ${mygame.restTime}`;\n\tif (mygame.restTime === 0) {\n\t\tsetResult('Вы проиграли(');\n\t\tneedCheck = false;\n\t}\n};\n\nconst setResult = (txt) => {\n\tclearInterval(timer);\n\tmain_info_wrapper.classList.add('active');\n\tmsg.innerHTML = txt;\n\tmain_wrapper.removeEventListener('click', main_handler);\n\tneedNewTimer = true;\n\tcount = arr.length;\n};\n\nrestart.addEventListener('click', mygame.restart.bind(mygame));\n\n\n//# sourceURL=webpack:///./js/main.js_+_2_modules?")}]);